.flex-row {
    flex-direction: row;
}

.flex-row-reverse {
    flex-direction: row-reverse;
}

.flex-col {
    flex-direction: column;
}

.flex-col-reverse {
    flex-direction: column-reverse;
}

.flex-wrap {
    flex-wrap: wrap;
}

.flex-wrap-reverse {
    flex-wrap: wrap-reverse;
}

.flex-nowrap {
    flex-wrap: nowrap;
}

.place-items-start {
    place-items: start;
}

.place-items-end {
    place-items: end;
}

.place-items-center {
    place-items: center;
}

.place-items-stretch {
    place-items: stretch;
}

.place-content-center {
    place-content: center;
}

.place-content-start {
    place-content: start;
}

.place-content-end {
    place-content: end;
}

.place-content-between {
    place-content: space-between;
}

.place-content-around {
    place-content: space-around;
}

.place-content-evenly {
    place-content: space-evenly;
}

.place-content-stretch {
    place-content: stretch;
}

.place-self-auto {
    place-self: auto;
}

.place-self-start {
    place-self: start;
}

.place-self-end {
    place-self: end;
}

.place-self-center {
    place-self: center;
}

.place-self-stretch {
    place-self: stretch;
}

.items-start {
    align-items: flex-start;
}

.items-end {
    align-items: flex-end;
}

.items-center {
    align-items: center;
}

.items-baseline {
    align-items: baseline;
}

.items-stretch {
    align-items: stretch;
}

.content-center {
    align-content: center;
}

.content-start {
    align-content: flex-start;
}

.content-end {
    align-content: flex-end;
}

.content-between {
    align-content: space-between;
}

.content-around {
    align-content: space-around;
}

.content-evenly {
    align-content: space-evenly;
}

.self-auto {
    align-self: auto;
}

.self-start {
    align-self: flex-start;
}

.self-end {
    align-self: flex-end;
}

.self-center {
    align-self: center;
}

.self-stretch {
    align-self: stretch;
}

.justify-items-start {
    justify-items: start;
}

.justify-items-end {
    justify-items: end;
}

.justify-items-center {
    justify-items: center;
}

.justify-items-stretch {
    justify-items: stretch;
}

.justify-start {
    justify-content: flex-start;
}

.justify-end {
    justify-content: flex-end;
}

.justify-center {
    justify-content: center;
}

.justify-between {
    justify-content: space-between;
}

.justify-around {
    justify-content: space-around;
}

.justify-evenly {
    justify-content: space-evenly;
}

.justify-self-auto {
    justify-self: auto;
}

.justify-self-start {
    justify-self: start;
}

.justify-self-end {
    justify-self: end;
}

.justify-self-center {
    justify-self: center;
}

.justify-self-stretch {
    justify-self: stretch;
}

.flex-1 {
    flex: 1 1 0%;
}

.flex-auto {
    flex: 1 1 auto;
}

.flex-initial {
    flex: 0 1 auto;
}

.flex-none {
    flex: none;
}

.flex-grow-0 {
    flex-grow: 0;
}

.flex-grow {
    flex-grow: 1;
}

.flex-shrink-0 {
    flex-shrink: 0;
}

.flex-shrink {
    flex-shrink: 1;
}

.flex-gap {
    --flex-gap-x: #{rem(20)};
    --flex-gap-y: #{rem(20)};
    margin: calc(-1 * var(--flex-gap-y)) 0 0 calc(-1 * var(--flex-gap-x));
    width: calc(100% + var(--flex-gap-x));

    >* {
        margin: var(--flex-gap-y) 0 0 var(--flex-gap-x);
    }    
}

@each $breakpoint in map-keys($grid-breakpoints) {
    @include media-breakpoint-up($breakpoint) {
        $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

        @each $spaceKey, $space in $spacing {
            .#{$infix}flex-gap-#{str-replace($spaceKey, ',', '\\.')} {
                --flex-gap-x: #{$space};
                --flex-gap-y: #{$space};
            }
        }

        @each $spaceKey, $space in $spacing {
            .#{$infix}flex-gap-x-#{str-replace($spaceKey, ',', '\\.')} {
                --flex-gap-x: #{$space};
            }
        }

        @each $spaceKey, $space in $spacing {
            .#{$infix}flex-gap-y-#{str-replace($spaceKey, ',', '\\.')} {
                --flex-gap-y: #{$space};
            }
        }
    }
}